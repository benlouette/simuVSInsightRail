/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.4 at Fri Feb 02 14:50:23 2024. */

#ifndef PB_SVCDATA_PB_H_INCLUDED
#define PB_SVCDATA_PB_H_INCLUDED
#include <pb.h>

#include "svccommon.pb.h"

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _SKF_MsgType {
    SKF_MsgType_UNKNOWN_MESSAGETYPE = 0,
    SKF_MsgType_REQUEST = 1,
    SKF_MsgType_REPLY = 2,
    SKF_MsgType_PUBLISH = 3
} SKF_MsgType;

typedef enum _SKF_FunctionId {
    SKF_FunctionId_UNKNOWN_FUNCTIONID = 0,
    SKF_FunctionId_PUBALIVE = 1,
    SKF_FunctionId_TRANSACTIONBEGIN = 257,
    SKF_FunctionId_TRANSACTIONCOMMIT = 258,
    SKF_FunctionId_TRANSACTIONROLLBACK = 259,
    SKF_FunctionId_GETDATA = 513,
    SKF_FunctionId_STOREDATA = 514,
    SKF_FunctionId_PUBDATA = 515,
    SKF_FunctionId_GETMETADATA = 769,
    SKF_FunctionId_STOREMETADATA = 770,
    SKF_FunctionId_PUBMETADATA = 771,
    SKF_FunctionId_GETSCHEDULE = 1025,
    SKF_FunctionId_STORESCHEDULE = 1026,
    SKF_FunctionId_PUBSCHEDULE = 1027
} SKF_FunctionId;

typedef enum _SKF_ScheduleType {
    SKF_ScheduleType_UNKNOWN = 0,
    SKF_ScheduleType_NORMAL = 1,
    SKF_ScheduleType_ALARMSCHEDULE = 2
} SKF_ScheduleType;

typedef enum _SKF_Constraint_ConstraintType {
    SKF_Constraint_ConstraintType_UNKNOWN_CONTRAINT_TYPE = 0,
    SKF_Constraint_ConstraintType_MINMAX = 1,
    SKF_Constraint_ConstraintType_ENUM = 2,
    SKF_Constraint_ConstraintType_ENUMFLAGGED = 3
} SKF_Constraint_ConstraintType;

typedef enum _SKF_Parameter_ParameterType {
    SKF_Parameter_ParameterType_Unknown_Parameter_Type = 0,
    SKF_Parameter_ParameterType_Info = 1,
    SKF_Parameter_ParameterType_Measurement = 2,
    SKF_Parameter_ParameterType_Configuration = 3
} SKF_Parameter_ParameterType;

typedef enum _SKF_Schedule_IntervalType {
    SKF_Schedule_IntervalType_UNKNOWN_INTERVAL_TYPE = 0,
    SKF_Schedule_IntervalType_FIXED = 1,
    SKF_Schedule_IntervalType_CALENDARBASED = 2
} SKF_Schedule_IntervalType;

typedef enum _SKF_Schedule_PeriodType {
    SKF_Schedule_PeriodType_UNKNOWN_PERIOD_TYPE = 0,
    SKF_Schedule_PeriodType_SECONDS = 1,
    SKF_Schedule_PeriodType_MINUTES = 2,
    SKF_Schedule_PeriodType_HOURS = 3
} SKF_Schedule_PeriodType;

typedef enum _SKF_Schedule_CalendarType {
    SKF_Schedule_CalendarType_UNKNOWN_CALENDAR_TYPE = 0,
    SKF_Schedule_CalendarType_DAILY = 1,
    SKF_Schedule_CalendarType_WEEKLY = 2,
    SKF_Schedule_CalendarType_MONTHLY = 3
} SKF_Schedule_CalendarType;

/* Struct definitions */
typedef struct _SKF_Data {
    pb_callback_t param_value_groups;
} SKF_Data;

typedef struct _SKF_GetDataRep {
    uint8_t dummy_field;
} SKF_GetDataRep;

typedef struct _SKF_GetDataReq {
    pb_callback_t query;
} SKF_GetDataReq;

typedef struct _SKF_ScheduleData {
    pb_callback_t schedules;
} SKF_ScheduleData;

typedef struct _SKF_StoreDataRep {
    uint8_t dummy_field;
} SKF_StoreDataRep;

typedef struct _SKF_StoreMetadataRep {
    uint8_t dummy_field;
} SKF_StoreMetadataRep;

typedef struct _SKF_StoreSchedulesRep {
    uint8_t dummy_field;
} SKF_StoreSchedulesRep;

typedef struct _SKF_AlivePub {
    uint64_t time_stamp;
} SKF_AlivePub;

typedef struct _SKF_DataPub {
    SKF_Data data;
    bool has_block_index;
    int32_t block_index;
    bool has_block_count;
    int32_t block_count;
} SKF_DataPub;

typedef struct _SKF_EnumConstraint {
    pb_callback_t name;
    SKF_Value literal;
} SKF_EnumConstraint;

typedef struct _SKF_GetDataReq_Query {
    pb_callback_t parameters;
    bool has_start_time;
    uint64_t start_time;
    bool has_end_time;
    uint64_t end_time;
} SKF_GetDataReq_Query;

typedef struct _SKF_Header {
    int32_t version;
    SKF_MsgType type;
    pb_callback_t source_id;
    SKF_FunctionId function_id;
    int32_t message_id;
} SKF_Header;

typedef struct _SKF_Metadata {
    pb_callback_t name;
    bool has_max_message_size;
    uint32_t max_message_size;
    pb_callback_t device_type;
    pb_callback_t schedule_infos;
    pb_callback_t services;
    pb_callback_t properties;
} SKF_Metadata;

typedef struct _SKF_MinMaxConstraint {
    bool has_min_value;
    SKF_Value min_value;
    bool has_max_value;
    SKF_Value max_value;
} SKF_MinMaxConstraint;

typedef struct _SKF_Parameter {
    uint32_t id;
    pb_callback_t name;
    pb_callback_t sensor;
    SKF_Parameter_ParameterType type;
    pb_callback_t unit;
    pb_callback_t constraints;
} SKF_Parameter;

typedef struct _SKF_ParameterValue {
    uint32_t parameter_id;
    SKF_Value value;
    bool has_offset;
    int32_t offset;
} SKF_ParameterValue;

typedef struct _SKF_ParameterValueGroup {
    uint64_t timestamp;
    pb_callback_t param_values;
} SKF_ParameterValueGroup;

typedef struct _SKF_Property {
    uint32_t id;
    pb_callback_t name;
    pb_callback_t description;
    pb_callback_t parameters;
} SKF_Property;

typedef struct _SKF_Reply {
    int32_t result_code;
    pb_callback_t info;
    pb_size_t which__replies;
    union {
        SKF_TransactionBeginRep trans_begin;
        SKF_TransactionCommitRep trans_commit;
        SKF_TransactionRollbackRep trans_rollback;
        SKF_StoreDataRep store_data;
        SKF_GetDataRep get_data;
        SKF_StoreMetadataRep store_metadata;
        SKF_StoreSchedulesRep store_schedules;
    } _replies;
    bool has_timestamp;
    uint64_t timestamp;
} SKF_Reply;

typedef struct _SKF_Schedule {
    uint32_t id;
    SKF_ScheduleType type;
    uint32_t interval;
    bool active;
    bool has_interval_type;
    SKF_Schedule_IntervalType interval_type;
    bool has_period;
    SKF_Schedule_PeriodType period;
    bool has_calendar;
    SKF_Schedule_CalendarType calendar;
    bool has_day_ignore_mask;
    uint32_t day_ignore_mask;
    uint64_t start_time;
} SKF_Schedule;

typedef struct _SKF_ScheduleInfo {
    uint32_t schedule_id;
    SKF_ScheduleType type;
    pb_callback_t description;
} SKF_ScheduleInfo;

typedef struct _SKF_SchedulePub {
    SKF_ScheduleData schedule_data;
} SKF_SchedulePub;

typedef struct _SKF_Service {
    uint32_t type;
    pb_callback_t uri;
} SKF_Service;

typedef struct _SKF_StoreDataReq {
    bool has_trans_info;
    SKF_TransactionInfo trans_info;
    SKF_Data data;
} SKF_StoreDataReq;

typedef struct _SKF_StoreSchedulesReq {
    bool has_trans_info;
    SKF_TransactionInfo trans_info;
    SKF_ScheduleData schedule_data;
} SKF_StoreSchedulesReq;

typedef struct _SKF_Constraint {
    SKF_Constraint_ConstraintType type;
    pb_size_t which__constraint;
    union {
        SKF_MinMaxConstraint min_max_constraint;
        SKF_EnumConstraint enum_constraint;
    } _constraint;
} SKF_Constraint;

typedef struct _SKF_MetadataPub {
    SKF_Metadata metadata;
} SKF_MetadataPub;

typedef struct _SKF_StoreMetadataReq {
    bool has_trans_info;
    SKF_TransactionInfo trans_info;
    SKF_Metadata metadata;
} SKF_StoreMetadataReq;

typedef struct _SKF_Publish {
    pb_size_t which__publications;
    union {
        SKF_AlivePub alive;
        SKF_DataPub data;
        SKF_MetadataPub metadata;
        SKF_SchedulePub schedules;
    } _publications;
} SKF_Publish;

typedef struct _SKF_Request {
    pb_size_t which__requests;
    union {
        SKF_TransactionBeginReq trans_begin;
        SKF_TransactionCommitReq trans_commit;
        SKF_TransactionRollbackReq trans_rollback;
        SKF_StoreDataReq store_data;
        SKF_GetDataReq get_data;
        SKF_StoreMetadataReq tore_metadata;
        SKF_StoreSchedulesReq store_schedules;
    } _requests;
} SKF_Request;

typedef struct _SKF_SvcDataMsg {
    SKF_Header hdr;
    pb_size_t which__messages;
    union {
        SKF_Reply reply;
        SKF_Publish publish;
        SKF_Request request;
    } _messages;
} SKF_SvcDataMsg;

/* Default values for struct fields */
extern const int32_t SKF_Header_version_default;

/* Initializer values for message structs */
#define SKF_Header_init_default                  {512, (SKF_MsgType)0, {{NULL}, NULL}, (SKF_FunctionId)0, 0}
#define SKF_Service_init_default                 {0, {{NULL}, NULL}}
#define SKF_ParameterValue_init_default          {0, SKF_Value_init_default, false, 0}
#define SKF_ParameterValueGroup_init_default     {0, {{NULL}, NULL}}
#define SKF_Data_init_default                    {{{NULL}, NULL}}
#define SKF_ScheduleInfo_init_default            {0, (SKF_ScheduleType)0, {{NULL}, NULL}}
#define SKF_MinMaxConstraint_init_default        {false, SKF_Value_init_default, false, SKF_Value_init_default}
#define SKF_EnumConstraint_init_default          {{{NULL}, NULL}, SKF_Value_init_default}
#define SKF_Constraint_init_default              {(SKF_Constraint_ConstraintType)0, 0, {SKF_MinMaxConstraint_init_default}}
#define SKF_Parameter_init_default               {0, {{NULL}, NULL}, {{NULL}, NULL}, (SKF_Parameter_ParameterType)0, {{NULL}, NULL}, {{NULL}, NULL}}
#define SKF_Property_init_default                {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define SKF_Metadata_init_default                {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define SKF_Schedule_init_default                {0, (SKF_ScheduleType)0, 0, 0, false, (SKF_Schedule_IntervalType)0, false, (SKF_Schedule_PeriodType)0, false, (SKF_Schedule_CalendarType)0, false, 0, 0}
#define SKF_ScheduleData_init_default            {{{NULL}, NULL}}
#define SKF_AlivePub_init_default                {0}
#define SKF_MetadataPub_init_default             {SKF_Metadata_init_default}
#define SKF_DataPub_init_default                 {SKF_Data_init_default, false, 0, false, 0}
#define SKF_SchedulePub_init_default             {SKF_ScheduleData_init_default}
#define SKF_StoreMetadataReq_init_default        {false, SKF_TransactionInfo_init_default, SKF_Metadata_init_default}
#define SKF_StoreDataReq_init_default            {false, SKF_TransactionInfo_init_default, SKF_Data_init_default}
#define SKF_GetDataReq_init_default              {{{NULL}, NULL}}
#define SKF_GetDataReq_Query_init_default        {{{NULL}, NULL}, false, 0, false, 0}
#define SKF_StoreSchedulesReq_init_default       {false, SKF_TransactionInfo_init_default, SKF_ScheduleData_init_default}
#define SKF_StoreDataRep_init_default            {0}
#define SKF_GetDataRep_init_default              {0}
#define SKF_StoreMetadataRep_init_default        {0}
#define SKF_StoreSchedulesRep_init_default       {0}
#define SKF_Publish_init_default                 {0, {SKF_AlivePub_init_default}}
#define SKF_Request_init_default                 {0, {SKF_TransactionBeginReq_init_default}}
#define SKF_Reply_init_default                   {0, {{NULL}, NULL}, 0, {SKF_TransactionBeginRep_init_default}, false, 0}
#define SKF_SvcDataMsg_init_default              {SKF_Header_init_default, 0, {SKF_Reply_init_default}}
#define SKF_Header_init_zero                     {0, (SKF_MsgType)0, {{NULL}, NULL}, (SKF_FunctionId)0, 0}
#define SKF_Service_init_zero                    {0, {{NULL}, NULL}}
#define SKF_ParameterValue_init_zero             {0, SKF_Value_init_zero, false, 0}
#define SKF_ParameterValueGroup_init_zero        {0, {{NULL}, NULL}}
#define SKF_Data_init_zero                       {{{NULL}, NULL}}
#define SKF_ScheduleInfo_init_zero               {0, (SKF_ScheduleType)0, {{NULL}, NULL}}
#define SKF_MinMaxConstraint_init_zero           {false, SKF_Value_init_zero, false, SKF_Value_init_zero}
#define SKF_EnumConstraint_init_zero             {{{NULL}, NULL}, SKF_Value_init_zero}
#define SKF_Constraint_init_zero                 {(SKF_Constraint_ConstraintType)0, 0, {SKF_MinMaxConstraint_init_zero}}
#define SKF_Parameter_init_zero                  {0, {{NULL}, NULL}, {{NULL}, NULL}, (SKF_Parameter_ParameterType)0, {{NULL}, NULL}, {{NULL}, NULL}}
#define SKF_Property_init_zero                   {0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define SKF_Metadata_init_zero                   {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define SKF_Schedule_init_zero                   {0, (SKF_ScheduleType)0, 0, 0, false, (SKF_Schedule_IntervalType)0, false, (SKF_Schedule_PeriodType)0, false, (SKF_Schedule_CalendarType)0, false, 0, 0}
#define SKF_ScheduleData_init_zero               {{{NULL}, NULL}}
#define SKF_AlivePub_init_zero                   {0}
#define SKF_MetadataPub_init_zero                {SKF_Metadata_init_zero}
#define SKF_DataPub_init_zero                    {SKF_Data_init_zero, false, 0, false, 0}
#define SKF_SchedulePub_init_zero                {SKF_ScheduleData_init_zero}
#define SKF_StoreMetadataReq_init_zero           {false, SKF_TransactionInfo_init_zero, SKF_Metadata_init_zero}
#define SKF_StoreDataReq_init_zero               {false, SKF_TransactionInfo_init_zero, SKF_Data_init_zero}
#define SKF_GetDataReq_init_zero                 {{{NULL}, NULL}}
#define SKF_GetDataReq_Query_init_zero           {{{NULL}, NULL}, false, 0, false, 0}
#define SKF_StoreSchedulesReq_init_zero          {false, SKF_TransactionInfo_init_zero, SKF_ScheduleData_init_zero}
#define SKF_StoreDataRep_init_zero               {0}
#define SKF_GetDataRep_init_zero                 {0}
#define SKF_StoreMetadataRep_init_zero           {0}
#define SKF_StoreSchedulesRep_init_zero          {0}
#define SKF_Publish_init_zero                    {0, {SKF_AlivePub_init_zero}}
#define SKF_Request_init_zero                    {0, {SKF_TransactionBeginReq_init_zero}}
#define SKF_Reply_init_zero                      {0, {{NULL}, NULL}, 0, {SKF_TransactionBeginRep_init_zero}, false, 0}
#define SKF_SvcDataMsg_init_zero                 {SKF_Header_init_zero, 0, {SKF_Reply_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define SKF_Data_param_value_groups_tag          1
#define SKF_GetDataReq_query_tag                 1
#define SKF_ScheduleData_schedules_tag           1
#define SKF_AlivePub_time_stamp_tag              1
#define SKF_DataPub_data_tag                     1
#define SKF_DataPub_block_index_tag              2
#define SKF_DataPub_block_count_tag              3
#define SKF_EnumConstraint_name_tag              1
#define SKF_EnumConstraint_literal_tag           2
#define SKF_GetDataReq_Query_parameters_tag      1
#define SKF_GetDataReq_Query_start_time_tag      2
#define SKF_GetDataReq_Query_end_time_tag        3
#define SKF_Header_version_tag                   1
#define SKF_Header_type_tag                      2
#define SKF_Header_source_id_tag                 3
#define SKF_Header_function_id_tag               4
#define SKF_Header_message_id_tag                5
#define SKF_Metadata_name_tag                    1
#define SKF_Metadata_max_message_size_tag        2
#define SKF_Metadata_device_type_tag             3
#define SKF_Metadata_schedule_infos_tag          4
#define SKF_Metadata_services_tag                5
#define SKF_Metadata_properties_tag              6
#define SKF_MinMaxConstraint_min_value_tag       1
#define SKF_MinMaxConstraint_max_value_tag       2
#define SKF_Parameter_id_tag                     1
#define SKF_Parameter_name_tag                   2
#define SKF_Parameter_sensor_tag                 3
#define SKF_Parameter_type_tag                   4
#define SKF_Parameter_unit_tag                   5
#define SKF_Parameter_constraints_tag            6
#define SKF_ParameterValue_parameter_id_tag      1
#define SKF_ParameterValue_value_tag             2
#define SKF_ParameterValue_offset_tag            3
#define SKF_ParameterValueGroup_timestamp_tag    1
#define SKF_ParameterValueGroup_param_values_tag 2
#define SKF_Property_id_tag                      1
#define SKF_Property_name_tag                    2
#define SKF_Property_description_tag             3
#define SKF_Property_parameters_tag              4
#define SKF_Reply_trans_begin_tag                3

#define SKF_Reply_trans_commit_tag               4

#define SKF_Reply_trans_rollback_tag             5

#define SKF_Reply_store_data_tag                 6

#define SKF_Reply_get_data_tag                   7

#define SKF_Reply_store_metadata_tag             8

#define SKF_Reply_store_schedules_tag            9
#define SKF_Reply_result_code_tag                1
#define SKF_Reply_info_tag                       2
#define SKF_Reply_timestamp_tag                  10
#define SKF_Schedule_id_tag                      1
#define SKF_Schedule_type_tag                    2
#define SKF_Schedule_interval_tag                3
#define SKF_Schedule_active_tag                  4
#define SKF_Schedule_interval_type_tag           5
#define SKF_Schedule_period_tag                  6
#define SKF_Schedule_calendar_tag                7
#define SKF_Schedule_day_ignore_mask_tag         8
#define SKF_Schedule_start_time_tag              9
#define SKF_ScheduleInfo_schedule_id_tag         1
#define SKF_ScheduleInfo_type_tag                2
#define SKF_ScheduleInfo_description_tag         3
#define SKF_SchedulePub_schedule_data_tag        1
#define SKF_Service_type_tag                     1
#define SKF_Service_uri_tag                      2
#define SKF_StoreDataReq_trans_info_tag          1
#define SKF_StoreDataReq_data_tag                2
#define SKF_StoreSchedulesReq_trans_info_tag     1
#define SKF_StoreSchedulesReq_schedule_data_tag  2
#define SKF_Constraint_min_max_constraint_tag    2

#define SKF_Constraint_enum_constraint_tag       3
#define SKF_Constraint_type_tag                  1
#define SKF_MetadataPub_metadata_tag             1
#define SKF_StoreMetadataReq_trans_info_tag      1
#define SKF_StoreMetadataReq_metadata_tag        2
#define SKF_Publish_alive_tag                    1

#define SKF_Publish_data_tag                     2

#define SKF_Publish_metadata_tag                 3

#define SKF_Publish_schedules_tag                4
#define SKF_Request_trans_begin_tag              1

#define SKF_Request_trans_commit_tag             2

#define SKF_Request_trans_rollback_tag           3

#define SKF_Request_store_data_tag               4

#define SKF_Request_get_data_tag                 5

#define SKF_Request_tore_metadata_tag            6

#define SKF_Request_store_schedules_tag          7
#define SKF_SvcDataMsg_reply_tag                 2

#define SKF_SvcDataMsg_publish_tag               3

#define SKF_SvcDataMsg_request_tag               4
#define SKF_SvcDataMsg_hdr_tag                   1

/* Struct field encoding specification for nanopb */
extern const pb_field_t SKF_Header_fields[6];
extern const pb_field_t SKF_Service_fields[3];
extern const pb_field_t SKF_ParameterValue_fields[4];
extern const pb_field_t SKF_ParameterValueGroup_fields[3];
extern const pb_field_t SKF_Data_fields[2];
extern const pb_field_t SKF_ScheduleInfo_fields[4];
extern const pb_field_t SKF_MinMaxConstraint_fields[3];
extern const pb_field_t SKF_EnumConstraint_fields[3];
extern const pb_field_t SKF_Constraint_fields[4];
extern const pb_field_t SKF_Parameter_fields[7];
extern const pb_field_t SKF_Property_fields[5];
extern const pb_field_t SKF_Metadata_fields[7];
extern const pb_field_t SKF_Schedule_fields[10];
extern const pb_field_t SKF_ScheduleData_fields[2];
extern const pb_field_t SKF_AlivePub_fields[2];
extern const pb_field_t SKF_MetadataPub_fields[2];
extern const pb_field_t SKF_DataPub_fields[4];
extern const pb_field_t SKF_SchedulePub_fields[2];
extern const pb_field_t SKF_StoreMetadataReq_fields[3];
extern const pb_field_t SKF_StoreDataReq_fields[3];
extern const pb_field_t SKF_GetDataReq_fields[2];
extern const pb_field_t SKF_GetDataReq_Query_fields[4];
extern const pb_field_t SKF_StoreSchedulesReq_fields[3];
extern const pb_field_t SKF_StoreDataRep_fields[1];
extern const pb_field_t SKF_GetDataRep_fields[1];
extern const pb_field_t SKF_StoreMetadataRep_fields[1];
extern const pb_field_t SKF_StoreSchedulesRep_fields[1];
extern const pb_field_t SKF_Publish_fields[5];
extern const pb_field_t SKF_Request_fields[8];
extern const pb_field_t SKF_Reply_fields[11];
extern const pb_field_t SKF_SvcDataMsg_fields[5];

/* Maximum encoded size of messages (where known) */
#define SKF_Schedule_size                        39
#define SKF_AlivePub_size                        11
#define SKF_StoreDataRep_size                    0
#define SKF_GetDataRep_size                      0
#define SKF_StoreMetadataRep_size                0
#define SKF_StoreSchedulesRep_size               0

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SVCDATA_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
