#ifdef __cplusplus
extern "C" {
#endif

/*
 * ISvcData.h
 *
 *  Created on: 26 jan. 2016
 *      Author: Daniel van der Velde
 */

#ifndef COM_MOD_SVC_MQTT_DATA_ISVCDATA_H_
#define COM_MOD_SVC_MQTT_DATA_ISVCDATA_H_

/*
 * Includes
 */
#include "configIDEF.h"
#include "svcdata.pb.h"
/*
 * Macros
 */

// IDEF resultcode values (from the idef document Device Data Exchange Protocol, table 1)
#define IDEF_RESULT_OK               (0)
#define IDEF_RESULT_ERROR            (-1)
#define IDEF_RESULT_VERSION_MISMATCH (-2)
#define IDEF_RESULT_TRANSACTION_FAIL (-3)
#define IDEF_RESULT_NOT_SUPPORTED    (-4)


/*
 * Types
 */

typedef enum {
    ISVCDATARC_OK = 0,
    ISVCDATARC_ERR_BUSY,
    ISVCDATARC_ERR_PARAM,
    ISVCDATARC_ERR_STATE,
    ISVCDATARC_ERR_TIMEOUT,
    ISVCDATARC_ERR_MQTT,
    ISVCDATARC_ERR_FATAL
} ISvcDataRc_t;

typedef enum {
    ISVCDATA_STATE_DISABLED = 0,
    ISVCDATA_STATE_STARTED,
} ISvcDataState_t;


// callback functions, a separate one, for every SvcData originated received message
typedef uint32_t (* tSvcDataCallbackFuncPtr)(void * buf );
typedef enum
{
    SvcData_cb_pubAlive = 0,
    SvcData_cb_pubData,
    SvcData_cb_storeDataRequest,
    SvcData_cb_storeDataReply,
    SvcData_cb_getDataRequest,
    SvcData_cb_getDataReply,
    SvcData_cb_max
} tSvcDataCallbackIndex;


// used in the callback function, not happy with this, but in a hurry
typedef struct {
    int32_t  message_id;// message ID to use in the reply
    SvcDataParamValueGroup_t * paramGroupList_p;// pointer to the received parameter list information
}   tIdefGetDataReq;

typedef struct {
    uint64_t timestamp; // most recent timestamp of the received data
}   tIdefGetDataRep;

typedef struct {
    int32_t  message_id;// message ID to use in the reply
    uint64_t timestamp; // most recent timestamp of the received data
}   tIdefStoreDataReq;

typedef struct {
    int32_t result_code;
    uint64_t timestamp; // most recent timestamp of the received data
}   tIdefStoreDataRep;

/*
 * Functions
 */

/**
 * ISvcData_Start
 *
 * @brief Starts the Data Service.
 * @return
 *   ISVCDATARC_OK       service started successfully
 *   ISVCDATARC_STATE    state error, e.g. Comm protocol stack not connected
 */
ISvcDataRc_t ISvcData_Start( void );

/**
 * ISvcData_Stop
 *
 * @brief Stops the service.
 * @return
 *   ISVCDATARC_OK       service stopped successfully
 *   ISVCDATARC_STATE    state error, e.g. service was not running
 */
ISvcDataRc_t ISvcData_Stop( void );

/**
 * ISvcData_Publish_Alive
 *
 * @brief Send message: Alive
 * Typically sent only once to inform SKF Connectivity Data Service of presence
 *
 * @return
 *   ISVCDATARC_OK       service stopped successfully
 *   ISVCDATARC_STATE    state error, e.g. service was not running
 */
ISvcDataRc_t ISvcData_Publish_Alive( void );

/**
 * ISvcData_Publish_Data
 *
 * @brief Send message: Data
 * This function publishes the data in the list passed to this function. The data-list
 * is typically pre-configured and contains a list with parameter ID's that must be
 * sent over the wire.
 *
 * @param dataListId ID of the pre-configured IDEF data list (containing 1 or more parameterGroups of
 *                   of 1 or more parameterValues)
 * @param nrElementsOverrule    overrules the number of array elements transferred, set to zero for all elements
 * @param msgType        if reply, the messageId (next parameter) is taken, otherwise a self autogenerated one
 * @param msgType       message_id to use if the publish is a reply
 * @return
 *   ISVCDATARC_OK       service stopped successfully
 *   ISVCDATARC_STATE    state error, e.g. service was not running
 */
ISvcDataRc_t ISvcData_Publish_Data(  SvcDataData_t * dataListId, uint32_t nrElementsOverrule, SKF_MsgType msgType, int32_t message_id );


/**
 * ISvcData_RequestStoreData
 *
 * @brief Send message: request store Data
 * This function sends the store data request, which sould be acknowledged by a reply from the receiver.
 * publishes the data in the list passed to this function. The data-list
 * is typically pre-configured and contains a list with parameter ID's that must be
 * sent over the wire.
 *
 * @param dataListId ID of the pre-configured IDEF data list (containing 1 or more parameterGroups of
 *                   of 1 or more parameterValues)
 * @param messageId_p   the message id of the request, next received reply should have this message Id
 *
 * @return
 *   ISVCDATARC_OK       service stopped successfully
 *   ISVCDATARC_STATE    state error, e.g. service was not running
 */
ISvcDataRc_t ISvcData_RequestStoreData(  SvcDataData_t * dataListId, uint32_t * messageId_p  );


/**
 * ISvcData_ReplyStoreData
 *
 * @brief Send message: request store Data
 * This function sends the store data request, which sould be acknowledged by a reply from the receiver.
 * publishes the data in the list passed to this function. The data-list
 * is typically pre-configured and contains a list with parameter ID's that must be
 * sent over the wire.
 *
 * @param message_id    id of the corresponding request message
 * @param result_code   ok or error code
 * @param info          optional info string describing the error when not OK
 *
 * @return
 *   ISVCDATARC_OK       service stopped successfully
 *   ISVCDATARC_STATE    state error, e.g. service was not running
 */
ISvcDataRc_t ISvcData_ReplyStoreData( uint32_t message_id, int32_t result_code,  char * info );

/*
* ISvcData_RequestGetData
*
* @brief Send message: request store Data
* This function sends the store data request, which sould be acknowledged by a reply from the receiver.
* publishes the data in the list passed to this function. The data-list
* is typically pre-configured and contains a list with parameter ID's that must be
* sent over the wire.
*
* @param dataListId ID of the pre-configured IDEF data list, timestamp not used
* @param messageId_p   the message id of the request, next received reply should have this message Id
*
* @return
*   ISVCDATARC_OK       service stopped successfully
*   ISVCDATARC_STATE    state error, e.g. service was not running
*/
ISvcDataRc_t ISvcData_RequestGetData(  SvcDataParamValueGroup_t * dataListId, uint32_t * messageId_p  );



/**
 * ISvcData_ReplyGetData
 *
 * @brief Send message: reply get Data
 * This function sends the get data reply, which should be called after receiving and handling the getdata request.
 *
 * @param message_id    id of the corresponding request message
 * @param result_code   ok or error code
 * @param info          optional info string describing the error when not OK
 *
 * @return
 *   ISVCDATARC_OK       service stopped successfully
 *   ISVCDATARC_STATE    state error, e.g. service was not running
 */
ISvcDataRc_t ISvcData_ReplyGetData( uint32_t message_id, int32_t result_code, char * info );


void SvcDataRemoveCallback(tSvcDataCallbackIndex cbIdx, tSvcDataCallbackFuncPtr cbFunc);
void SvcDataSetCallback(tSvcDataCallbackIndex cbIdx, tSvcDataCallbackFuncPtr cbFunc);

#if 0
ISvcData_Rx_Alive( void );


ISvcData_Rx_ReqSendMetadata(); // answer: ok, nosup, error
ISvcDataRc_t ISvcData_Send_ReqStoreMetadata( commit_flag, transactionid, metadata_fragment); // initiate send rq/rp
// answer: ok, nosup, error

ISvcData_Rx_ReqSendData(); // answer ok, nodata, error
ISvcDataRc_t ISvcData_Send_ReqStoreData( void ); // initiate send rq/rp
// answer: ok, error

ISvcData_Rx_ReqStoreData(); // answer ok/nok and store data
// answer: ok, error


ReqTransaction_Begin(); // return transaction id
RxTransaction_Begin; // generated transaction id in reply

ReqTransaction_Commit(seq_count); // answer: ok
RxTransaction_Commit; // answer:


ReqStoreData(transaction id, seqnr, parameter/fragment);
ReqStoreData_Commit(transaction id, seqcount);
ReqStoreData_Abort(transaction id);

[paramid,value]
#endif

#endif /* COM_MOD_SVC_MQTT_DATA_ISVCDATA_H_ */


#ifdef __cplusplus
}
#endif