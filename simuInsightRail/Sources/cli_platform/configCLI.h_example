This is an example of a possible CLI configuration, actual configuration depends on the project it is used in.

So, place this file in the project config directory and edit as desired

/*
 * configCLI.h
 *
 *  Created on: Oct 29, 2015
 *      Author: George de Fockert
 */

#ifndef SOURCES_CONFIG_CONFIGCLI_H_
#define SOURCES_CONFIG_CONFIGCLI_H_


// Define here the mapping to the actual used UART port
// must be supplied by the project
#define CLI_UART_IDX (UART1_IDX)

// unfortunately, also the IRQ vectors must be set
#define CLI_UART_RX_TX_IRQhandler UART1_RX_TX_IRQHandler
#define CLI_UART_ERR_IRQhandler UART1_ERR_IRQHandler


// following defines are optional, when not defined some default is chosen

// if following define exists,  it will call the named function,
// feel free to name the function whatever you like for your application
// then the application should have the following function : int application_keep_awake(char * cmdbuf, uint8_t dbg_put_ch)
#define CLI_NOTIFY_ACTIVITY_FUNCTION	application_keep_awake 
#ifdef CLI_NOTIFY_ACTIVITY_FUNCTION
int application_keep_awake(char * cmdbuf, uint8_t dbg_put_ch);
#endif


// can we have access over more than one port ?
#define MAX_DEBUG_PUT_CH (1)
#define CLI_DEBUG_PUT_CH (0)
// keep secondary the same as the primary, if we do not have a secundary
#define CLI_SECUNDARY_DEBUG_PUT_CH  (0)

// number of subcomponents which can add commands to the CLI with the cliRegisterCommands() function
// be aware, that the CLI itself also counts as a component
#define CLI_MAXCOMPONENTS (5)

// defines to configure some CLI parameters which can have consequences on ram usage
#define CLI_CMDLEN (80)
#define CLI_HISTORY (4)


// low level software fifo receive and transmit  buffer sizes
#define CLI_MAXRXBUF 32
#define CLI_MAXTXBUF 32

#endif /* SOURCES_CONFIG_CONFIGCLI_H_ */
