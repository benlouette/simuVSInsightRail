/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.4 at Fri Feb 02 14:50:23 2024. */

#ifndef PB_SVCCOMMON_PB_H_INCLUDED
#define PB_SVCCOMMON_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _SKF_ProtoBufFileVersion_t {
    SKF_ProtoBufFileVersion_t_UNDEFINED_PROTOBUF_FILEVERSION = 0,
    SKF_ProtoBufFileVersion_t_PROTOBUF_FILE_VERSION_GPB_2_1 = 1
} SKF_ProtoBufFileVersion_t;

typedef enum _SKF_Preamble_t {
    SKF_Preamble_t_UNKNOWN_PREAMBLE_TYPE = 0,
    SKF_Preamble_t_GPB2 = 1,
    SKF_Preamble_t_GPB2_1 = 2,
    SKF_Preamble_t_GPB2_2 = 3
} SKF_Preamble_t;

typedef enum _SKF_IdefMsgType_t {
    SKF_IdefMsgType_t_UNKNOWN_IDEFMSGTYPE = 0,
    SKF_IdefMsgType_t_FIRMWARE_UPDATE_NOTIFICATION = 7,
    SKF_IdefMsgType_t_FIRMWARE_BLOCK_REQUEST = 8,
    SKF_IdefMsgType_t_FIRMWARE_BLOCK_REPLY = 9
} SKF_IdefMsgType_t;

typedef enum _SKF_Value_t {
    SKF_Value_t_UNKNOWN_VALUE_TYPE = 0,
    SKF_Value_t_BOOL = 1,
    SKF_Value_t_BYTE = 2,
    SKF_Value_t_INT16 = 3,
    SKF_Value_t_UINT16 = 4,
    SKF_Value_t_INT32 = 5,
    SKF_Value_t_UINT32 = 6,
    SKF_Value_t_INT64 = 7,
    SKF_Value_t_UINT64 = 8,
    SKF_Value_t_SINGLE = 9,
    SKF_Value_t_DOUBLE = 10,
    SKF_Value_t_STRING = 11
} SKF_Value_t;

/* Struct definitions */
typedef struct _SKF_TransactionBeginReq {
    uint8_t dummy_field;
} SKF_TransactionBeginReq;

typedef struct _SKF_TransactionCommitRep {
    uint8_t dummy_field;
} SKF_TransactionCommitRep;

typedef struct _SKF_TransactionRollbackRep {
    uint8_t dummy_field;
} SKF_TransactionRollbackRep;

typedef struct _SKF_TransactionBeginRep {
    uint32_t trans_id;
} SKF_TransactionBeginRep;

typedef struct _SKF_TransactionCommitReq {
    uint64_t trans_id;
    uint64_t trans_seq;
} SKF_TransactionCommitReq;

typedef struct _SKF_TransactionInfo {
    uint32_t trans_id;
    uint32_t trans_seq;
} SKF_TransactionInfo;

typedef struct _SKF_TransactionRollbackReq {
    uint64_t trans_id;
} SKF_TransactionRollbackReq;

typedef struct _SKF_Value {
    SKF_Value_t value_type;
    pb_callback_t data;
} SKF_Value;

/* Default values for struct fields */

/* Initializer values for message structs */
#define SKF_Value_init_default                   {(SKF_Value_t)0, {{NULL}, NULL}}
#define SKF_TransactionBeginReq_init_default     {0}
#define SKF_TransactionBeginRep_init_default     {0}
#define SKF_TransactionCommitReq_init_default    {0, 0}
#define SKF_TransactionCommitRep_init_default    {0}
#define SKF_TransactionRollbackReq_init_default  {0}
#define SKF_TransactionRollbackRep_init_default  {0}
#define SKF_TransactionInfo_init_default         {0, 0}
#define SKF_Value_init_zero                      {(SKF_Value_t)0, {{NULL}, NULL}}
#define SKF_TransactionBeginReq_init_zero        {0}
#define SKF_TransactionBeginRep_init_zero        {0}
#define SKF_TransactionCommitReq_init_zero       {0, 0}
#define SKF_TransactionCommitRep_init_zero       {0}
#define SKF_TransactionRollbackReq_init_zero     {0}
#define SKF_TransactionRollbackRep_init_zero     {0}
#define SKF_TransactionInfo_init_zero            {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define SKF_TransactionBeginRep_trans_id_tag     1
#define SKF_TransactionCommitReq_trans_id_tag    1
#define SKF_TransactionCommitReq_trans_seq_tag   2
#define SKF_TransactionInfo_trans_id_tag         1
#define SKF_TransactionInfo_trans_seq_tag        2
#define SKF_TransactionRollbackReq_trans_id_tag  1
#define SKF_Value_value_type_tag                 1
#define SKF_Value_data_tag                       2

/* Struct field encoding specification for nanopb */
extern const pb_field_t SKF_Value_fields[3];
extern const pb_field_t SKF_TransactionBeginReq_fields[1];
extern const pb_field_t SKF_TransactionBeginRep_fields[2];
extern const pb_field_t SKF_TransactionCommitReq_fields[3];
extern const pb_field_t SKF_TransactionCommitRep_fields[1];
extern const pb_field_t SKF_TransactionRollbackReq_fields[2];
extern const pb_field_t SKF_TransactionRollbackRep_fields[1];
extern const pb_field_t SKF_TransactionInfo_fields[3];

/* Maximum encoded size of messages (where known) */
#define SKF_TransactionBeginReq_size             0
#define SKF_TransactionBeginRep_size             6
#define SKF_TransactionCommitReq_size            22
#define SKF_TransactionCommitRep_size            0
#define SKF_TransactionRollbackReq_size          11
#define SKF_TransactionRollbackRep_size          0
#define SKF_TransactionInfo_size                 12

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SVCCOMMON_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
