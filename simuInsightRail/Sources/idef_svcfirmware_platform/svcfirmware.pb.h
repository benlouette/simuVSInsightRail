/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.4 at Fri Feb 02 14:50:24 2024. */

#ifndef PB_SVCFIRMWARE_PB_H_INCLUDED
#define PB_SVCFIRMWARE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _SKF_SvcFirmwareBlockReply {
    int32_t version;
    pb_callback_t source_id;
    int32_t message_id;
    pb_callback_t device_type;
    uint32_t hardware_version;
    uint32_t firmware_version;
    uint32_t byte_index;
    uint32_t image_size;
    pb_callback_t image;
} SKF_SvcFirmwareBlockReply;

typedef struct _SKF_SvcFirmwareBlockRequest {
    int32_t version;
    pb_callback_t source_id;
    int32_t message_id;
    pb_callback_t device_type;
    uint32_t hardware_version;
    uint32_t firmware_version;
    uint32_t byte_index;
    uint32_t block_size;
} SKF_SvcFirmwareBlockRequest;

typedef struct _SKF_SvcFirmwareUpdateNotification {
    int32_t version;
    pb_callback_t source_id;
    int32_t message_id;
    pb_callback_t device_type;
    uint32_t hardware_version;
    uint32_t firmware_version;
    uint32_t image_size;
} SKF_SvcFirmwareUpdateNotification;

/* Default values for struct fields */
extern const int32_t SKF_SvcFirmwareUpdateNotification_version_default;
extern const int32_t SKF_SvcFirmwareBlockRequest_version_default;
extern const int32_t SKF_SvcFirmwareBlockReply_version_default;

/* Initializer values for message structs */
#define SKF_SvcFirmwareUpdateNotification_init_default {512, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, 0, 0}
#define SKF_SvcFirmwareBlockRequest_init_default {512, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, 0, 0, 0}
#define SKF_SvcFirmwareBlockReply_init_default   {512, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, 0, 0, 0, {{NULL}, NULL}}
#define SKF_SvcFirmwareUpdateNotification_init_zero {0, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, 0, 0}
#define SKF_SvcFirmwareBlockRequest_init_zero    {0, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, 0, 0, 0}
#define SKF_SvcFirmwareBlockReply_init_zero      {0, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, 0, 0, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define SKF_SvcFirmwareBlockReply_version_tag    1
#define SKF_SvcFirmwareBlockReply_source_id_tag  2
#define SKF_SvcFirmwareBlockReply_message_id_tag 3
#define SKF_SvcFirmwareBlockReply_device_type_tag 4
#define SKF_SvcFirmwareBlockReply_hardware_version_tag 5
#define SKF_SvcFirmwareBlockReply_firmware_version_tag 6
#define SKF_SvcFirmwareBlockReply_byte_index_tag 7
#define SKF_SvcFirmwareBlockReply_image_size_tag 8
#define SKF_SvcFirmwareBlockReply_image_tag      9
#define SKF_SvcFirmwareBlockRequest_version_tag  1
#define SKF_SvcFirmwareBlockRequest_source_id_tag 2
#define SKF_SvcFirmwareBlockRequest_message_id_tag 3
#define SKF_SvcFirmwareBlockRequest_device_type_tag 4
#define SKF_SvcFirmwareBlockRequest_hardware_version_tag 5
#define SKF_SvcFirmwareBlockRequest_firmware_version_tag 6
#define SKF_SvcFirmwareBlockRequest_byte_index_tag 7
#define SKF_SvcFirmwareBlockRequest_block_size_tag 8
#define SKF_SvcFirmwareUpdateNotification_version_tag 1
#define SKF_SvcFirmwareUpdateNotification_source_id_tag 2
#define SKF_SvcFirmwareUpdateNotification_message_id_tag 3
#define SKF_SvcFirmwareUpdateNotification_device_type_tag 4
#define SKF_SvcFirmwareUpdateNotification_hardware_version_tag 5
#define SKF_SvcFirmwareUpdateNotification_firmware_version_tag 6
#define SKF_SvcFirmwareUpdateNotification_image_size_tag 7

/* Struct field encoding specification for nanopb */
extern const pb_field_t SKF_SvcFirmwareUpdateNotification_fields[8];
extern const pb_field_t SKF_SvcFirmwareBlockRequest_fields[9];
extern const pb_field_t SKF_SvcFirmwareBlockReply_fields[10];

/* Maximum encoded size of messages (where known) */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SVCFIRMWARE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
